import os
import netCDF4 as nc
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import csv

# Function to extract climate data for a station
def extract_station_data(station_id, station_lat, station_lon, nc_file, file):
    try:
        if file.endswith('.nc'):
            # Extract variable values at the station location
            year = file.split('_')[2]       # string format of year ####
            month = file.split('_')[-1][:-3] # string format of month ##
            
            # List of datetimes
            raw_time_array = np.array(nc_file['time'][:])
            datetime_lst = [datetime(1900, 1, 1, 0, 0, 0) + timedelta(hours=int(i)) for i in raw_time_array]
            
            longitude_raw = np.array(nc_file['longitude'][:])
            latitude_raw = np.array(nc_file['latitude'][:])
            
            long_pos = sum((station_lon > longitude_raw) * 1)
            lat_pos = sum((station_lat > latitude_raw) * 1)
            
            var_name_lst = [var_name for var_name, var in nc_file.variables.items()][3:]
            
            # Initiate an empty pandas DataFrame to store final results
            result_dic = {}
            result_dic['datetime'] = datetime_lst
            result_dic['station_id'] = [station_id] * len(datetime_lst)
            result_dic['station_lat'] = [station_lat] * len(datetime_lst)
            result_dic['station_lon'] = [station_lon] * len(datetime_lst)
            
            for var in var_name_lst:
                var_data = np.array(nc_file[var][:])
                var_values = []
                for i in range(len(datetime_lst)):
                    data_matrix = var_data[i]
                    upper_left_val = data_matrix[lat_pos, long_pos]
                    upper_right_val = data_matrix[lat_pos, long_pos + 1]
                    lower_left_val = data_matrix[lat_pos + 1, long_pos]
                    lower_right_val = data_matrix[lat_pos + 1, long_pos + 1]
                    
                    # Check for missing values
                    all_values = [upper_left_val, upper_right_val, lower_left_val, lower_right_val]
                    non_missing_values = [val for val in all_values if val != -32767]
                    
                    # Handle the case where there are no non-missing values
                    if non_missing_values:
                        vals_avg = np.mean(non_missing_values)
                    else:
                        vals_avg = 0  # Set a default value for missing data
                    
                    var_values.append(vals_avg)
                
                result_dic[var] = var_values
            result_df = pd.DataFrame(result_dic)
            return result_df
        else:
            return None
    except Exception as e:
        print(f"Error processing station {station_id} for file {file}: {str(e)}")
        return None

# Define paths and lists
file_dir = 'D:/ESMI_Dataset/ESMI_Data/IDN_EAST_EAR5_Land/IDN_EAST_EAR5_Land_NetCDF/'
output_dir = 'D:/ESMI_Dataset/ESMI_Data/IDN_EAST_EAR5_Land/output/'
station_data_file = "D:/ESMI_Dataset/ESMI_Data/IDN_EAST_EAR5_Land/ESMI_Location_IND_EAST.csv"

try:
    with open(station_data_file, "r") as stationlist:
        csv_reader = csv.reader(stationlist)
        next(csv_reader)  # Skip the header row
        
        for row in csv_reader:
            station_id, station_lat, station_lon = row[0], float(row[6]), float(row[7])
            
            for file in os.listdir(file_dir):
                if file.endswith('.nc'):
                    nc_file = nc.Dataset(os.path.join(file_dir, file), 'r')
                    result_df = extract_station_data(station_id, station_lat, station_lon, nc_file, file)
                    if result_df is not None:
                        result_df.to_csv(os.path.join(output_dir, f'station_{station_id}_{file[:-3]}.csv'))
                    nc_file.close()
                               
except Exception as e:
    print(f"Error: {str(e)}")
